package com.andy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.andy.greendao.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RECORD".
 */
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Num = new Property(1, Double.class, "num", false, "NUM");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property Category_id = new Property(4, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property Funds_id = new Property(5, Long.class, "funds_id", false, "FUNDS_ID");
        public final static Property Category_name = new Property(6, String.class, "category_name", false, "CATEGORY_NAME");
        public final static Property Is_pay = new Property(7, Boolean.class, "is_pay", false, "IS_PAY");
        public final static Property Funds_name = new Property(8, String.class, "funds_name", false, "FUNDS_NAME");
    }

    ;


    public RecordDao(DaoConfig config) {
        super(config);
    }

    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NUM\" REAL," + // 1: num
                "\"DATE\" INTEGER," + // 2: date
                "\"DESC\" TEXT," + // 3: desc
                "\"CATEGORY_ID\" INTEGER," + // 4: category_id
                "\"FUNDS_ID\" INTEGER," + // 5: funds_id
                "\"CATEGORY_NAME\" TEXT," + // 6: category_name
                "\"IS_PAY\" INTEGER," + // 7: is_pay
                "\"FUNDS_NAME\" TEXT);"); // 8: funds_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double num = entity.getNum();
        if (num != null) {
            stmt.bindDouble(2, num);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }

        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(5, category_id);
        }

        Long funds_id = entity.getFunds_id();
        if (funds_id != null) {
            stmt.bindLong(6, funds_id);
        }

        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(7, category_name);
        }

        Boolean is_pay = entity.getIs_pay();
        if (is_pay != null) {
            stmt.bindLong(8, is_pay ? 1L : 0L);
        }

        String funds_name = entity.getFunds_name();
        if (funds_name != null) {
            stmt.bindString(9, funds_name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // num
                cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // category_id
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // funds_id
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // category_name
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // is_pay
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // funds_name
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNum(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setFunds_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCategory_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIs_pay(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setFunds_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Record entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
